apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "notification.fullname" . }}
  {{- if .Values.notification.deploymenttAnnotations }}
  annotations:
    {{- with .Values.notification.deploymenttAnnotations }}
      {{- range $key, $value := . }}
      {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 4 }}
      {{- end }}
      {{- end }}
  {{- end }}
  labels:
    {{- include "notification.commonLabels" . | nindent 4 }}
    service: {{ include "notification.fullname" . }}
spec:
  selector:
    matchLabels:
      {{- include "notification.selectorLabels" . | nindent 6 }}
  replicas: {{ .Values.notification.replicas }}
  revisionHistoryLimit: 3
  minReadySeconds: 5
  strategy:
    # indicate which strategy we want for rolling update
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        name: {{ include "notification.fullname" . }}
        service: {{ include "notification.fullname" . }}
        {{- include "notification.selectorLabels" . | nindent 8 }}
          {{- with .Values.notification.podLabels }}
          {{- toYaml . | nindent 8 }}
          {{- end }}
      annotations:
        {{- with .Values.notification.podAnnotations }}
        {{- range $key, $value := . }}
        {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 8 }}
        {{- end }}
        {{- end }}
    spec:
      restartPolicy: {{ .Values.notification.restartPolicy }}
      securityContext:
        {{- toYaml .Values.notification.securityContext | nindent 8 }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.notification.image.repository }}:{{ .Values.notification.image.tag }}"
        imagePullPolicy: {{ .Values.notification.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.notification.containerSecurityContext | nindent 12 }}
        {{- with .Values.notification.lifecycleHooks }}
        lifecycle:
          {{- tpl . $ | nindent 12 }}
        {{- end }}
        command: ["/bin/sh"]
        args: ["-c", "/app/run.sh -Djava.security.egd=file:/dev/./urandom -Djavax.net.ssl.keyStore=/etc/keystore/keystore.p12 -Djavax.net.ssl.keyStorePassword=changeit -Djavax.net.ssl.trustStore=/etc/keystore/cacerts -Djavax.net.ssl.trustStoreType=pkcs12 -Djavax.net.ssl.trustStorePassword=changeit -Djava.library.path=/usr/lib/$(uname -p)-linux-gnu -jar /app/talos-notification-gateway.jar"]
        env:
          - name: CONFIG_SERVER_URL
            value: {{ .Values.notification.configservice.url | quote }}
          - name: CONFIG_SERVER_TOKEN
            valueFrom:
              secretKeyRef:
                name: notification
                key: token
          - name: SPRING_PROFILES_ACTIVE
            value: {{ .Values.notification.springProfileActive | quote }}
        ports:
          - name: https
            containerPort: {{ .Values.notification.service.targetPort }}
            protocol: TCP
        livenessProbe:
          httpGet:
            scheme: HTTPS
            path: /actuator/health
            port: {{ .Values.notification.service.targetPort }}
          initialDelaySeconds: 360
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            scheme: HTTPS
            path: /actuator/info
            port: {{ .Values.notification.service.targetPort }}
          initialDelaySeconds: 240
          timeoutSeconds: 1
        resources:
          {{- toYaml .Values.notification.resources | nindent 12 }}
        volumeMounts:
          - name: certs
            mountPath: /certs
            readOnly: true
          - name: cacerts
            mountPath: /cacerts
            readOnly: true
      volumes:
        - name: certs
          secret:
            secretName: {{ include "notification.fullname" . }}-pod-cert
        - name: cacerts
          secret:
            secretName: ca
      imagePullSecrets:
        - name: regcred
