apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cubejsbackend.fullname" . }}
  {{- if .Values.cubejsbackend.deploymenttAnnotations }}
  annotations:
    {{- with .Values.cubejsbackend.deploymenttAnnotations }}
      {{- range $key, $value := . }}
      {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 4 }}
      {{- end }}
      {{- end }}
  {{- end }}
  labels:
    {{- include "cubejsbackend.commonLabels" . | nindent 4 }}
    service: {{ include "cubejsbackend.fullname" . }}
spec:
  selector:
    matchLabels:
      {{- include "cubejsbackend.selectorLabels" . | nindent 6 }}
  replicas: {{ .Values.cubejsbackend.replicas }}
  revisionHistoryLimit: 3
  minReadySeconds: 5
  strategy:
    # indicate which strategy we want for rolling update
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        name: {{ include "cubejsbackend.fullname" . }}
        service: {{ include "cubejsbackend.fullname" . }}
        {{- include "cubejsbackend.selectorLabels" . | nindent 8 }}
          {{- with .Values.cubejsbackend.podLabels }}
          {{- toYaml . | nindent 8 }}
          {{- end }}
      annotations:
        {{- with .Values.cubejsbackend.podAnnotations }}
        {{- range $key, $value := . }}
        {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 8 }}
        {{- end }}
        {{- end }}
    spec:
      restartPolicy: {{ .Values.cubejsbackend.restartPolicy }}
      securityContext:
        {{- toYaml .Values.cubejsbackend.securityContext | nindent 8 }}

      initContainers:
        # Since k8s 1.9.4, config maps mount read-only volumes. Since the Docker image also writes to the config file,
        # the file must be mounted as read-write. We use init containers to copy from the config map read-only
        # path, to a read-write path
        - name: "tls-setup"
          image: busybox:1.32.0
          volumeMounts:
            - name: certificates
              mountPath: /certificates
            - name: ca
              mountPath: /ca
            - name: certs
              mountPath: /certs
          command:
            - sh
            - -c
            - cp /certs/tls.crt /certificates/tls.crt;
              printf "\n" >> /certificates/tls.crt;
              echo -en "$(cat /ca/ca.crt)" >> /certificates/tls.crt;
              echo -en "$(cat /certs/tls.key)" >> /certificates/tls.key;
              cp /ca/ca.crt /certificates/ca.crt;
              chown 1000 /certificates/*;
              chmod 0400 /certificates/*;
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.cubejsbackend.image.repository }}:{{ .Values.cubejsbackend.image.tag }}"
        imagePullPolicy: {{ .Values.cubejsbackend.image.pullPolicy }}
        securityContext:
          {{- toYaml .Values.cubejsbackend.containerSecurityContext | nindent 12 }}
        {{- with .Values.cubejsbackend.lifecycleHooks }}
        lifecycle:
          {{- tpl . $ | nindent 12 }}
        {{- end }}
        env:
          - name: CONFIG_SERVER_URL
            value: {{ .Values.cubejsbackend.configservice.url | quote }}
          - name: CONFIG_SERVER_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ include "cubejsbackend.fullname" . }}
                key: token
          - name: PROFILE
            value: {{ .Values.cubejsbackend.profile | quote }}
          - name: NODE_EXTRA_CA_CERTS
            value: "/etc/ssl/certs/ca-certificates.crt"
        ports:
          - name: tcp
            containerPort: 4001
            protocol: TCP
#        livenessProbe:
#          httpGet:
#            scheme: HTTPS
#            path: /actuator/health
#            port: 4001
#          initialDelaySeconds: 180
#          timeoutSeconds: 5
#        readinessProbe:
#          httpGet:
#            scheme: HTTPS
#            path: /actuator/info
#            port: 4001
#          initialDelaySeconds: 120
#          timeoutSeconds: 1
        resources:
          {{- toYaml .Values.cubejsbackend.resources | nindent 12 }}
        volumeMounts:
          - name: certificates
            mountPath: /certs
            readOnly: true
          - name: ca
            mountPath: /ca
            readOnly: true
      volumes:
        - name: certs
          secret:
            secretName: {{ include "cubejsbackend.fullname" . }}-pod-cert
        - name: ca
          secret:
            secretName: ca
        - name: certificates
          emptyDir: {}
      imagePullSecrets:
        - name: regcred
